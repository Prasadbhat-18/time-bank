rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Validate user data for Google login compatibility
    function isValidUserData(data) {
      return data.keys().hasAll(['email']) &&
             data.email is string &&
             data.email.size() > 0;
    }
    
    // Check if user update contains only allowed fields
    function isValidUserUpdate(data) {
      let allowedFields = [
        'username', 'bio', 'avatar_url', 'phone', 'email',
        'reputation_score', 'total_reviews', 'created_at',
        'level', 'experience_points', 'services_completed', 'services_requested',
        'custom_credits_enabled', 'updated_at'
      ];
      return data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }

    // Users collection - READ ALL (needed for profiles, providers, chat peers)
    // But only write your own - ENHANCED for Google login support
    match /users/{userId} {
      allow read: if true;  // Allow public read access for login/registration
      
      // Allow create for new users (Google login, phone registration)
      allow create: if isSignedIn() && 
                   isOwner(userId) && 
                   isValidUserData(request.resource.data);
      
      // Allow update for profile editing and XP/level progression - CRITICAL for Google users
      allow update: if isSignedIn() && 
                   isOwner(userId) && 
                   isValidUserUpdate(request.resource.data);
      
      // Prevent deletion of user profiles
      allow delete: if false;
    }

    // Skills - read for all authenticated users
    match /skills/{document} {
      allow read: if isSignedIn();
      allow write: if isSignedIn(); // Allow creates for now, restrict later if needed
    }

    // Services - read all, write only your own
    match /services/{serviceId} {
      // Allow public reads for listing services (app shows services to signed and unsigned users)
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.provider_id == request.auth.uid;
    }

    // Bookings - read/write if you're provider or requester
    match /bookings/{bookingId} {
      // Allow read for authenticated users; more granular checks (provider/requester) would block list queries
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && 
        (resource.data.provider_id == request.auth.uid || 
         resource.data.requester_id == request.auth.uid);
      allow delete: if isSignedIn() && resource.data.requester_id == request.auth.uid;
    }

    // Reviews - read all, write only your own
    match /reviews/{reviewId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.reviewer_id == request.auth.uid;
    }

    // Time credits - read/write your own
    match /timeCredits/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Time credits (alternative naming) - read/write your own
    match /time_credits/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Transactions - read if you're involved
    match /transactions/{transactionId} {
      allow read: if isSignedIn() && 
        (resource.data.from_user_id == request.auth.uid || 
         resource.data.to_user_id == request.auth.uid);
      allow create: if isSignedIn();
    }

    // Chats - FIXED: check participants during read, allow create with proper data
    match /chats/{chatId} {
      // Allow read if you're in the participants array
      allow read: if isSignedIn() && request.auth.uid in resource.data.participants;
      // Allow create if you're adding yourself to participants
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participants;
      // Allow update if you're already a participant
      allow update: if isSignedIn() && request.auth.uid in resource.data.participants;
      
      // Chat messages subcollection
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }

    // Default fallback for other collections (like admin, emergencyContacts, etc.)
    match /{collection}/{document=**} {
      allow read, write: if isSignedIn();
    }
  }
}

